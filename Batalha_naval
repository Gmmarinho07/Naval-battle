import tkinter as tk
import random

# Configurações do tabuleiro
TAMANHO_TABULEIRO = 5
NUM_NAVIOS = 3

class BatalhaNaval:
    def _init_(self, root):
        self.root = root
        self.root.title("Batalha Naval")
        self.root.resizable(False, False)  # Impede o redimensionamento da janela

        # Carregar imagens (sprites)
        self.img_agua = tk.PhotoImage(file="agua.png")
        self.img_navio = tk.PhotoImage(file="navio.png")
        self.img_acerto = tk.PhotoImage(file="navio.png")
        self.img_area_atacada = tk.PhotoImage(file="area_atacada.png")  # Novo sprite para locais atacados

        # Inicializa o tabuleiro
        self.tabuleiro_oponente = [["~" for _ in range(TAMANHO_TABULEIRO)] for _ in range(TAMANHO_TABULEIRO)]
        self.atacado = [[False for _ in range(TAMANHO_TABULEIRO)] for _ in range(TAMANHO_TABULEIRO)]  # Estado do ataque

        # Posiciona os navios do oponente
        self.navios_oponente = set()
        while len(self.navios_oponente) < NUM_NAVIOS:
            linha = random.randint(0, TAMANHO_TABULEIRO - 1)
            coluna = random.randint(0, TAMANHO_TABULEIRO - 1)
            self.navios_oponente.add((linha, coluna))

        # Contadores
        self.acertos = 0
        self.aliados = 25

        # Exibe os contadores
        self.label_contadores = tk.Label(
            self.root,
            text=f"Aliados: {self.aliados} | Acertos: {self.acertos}",
            font=("Helvetica", 12, "bold")
        )
        self.label_contadores.grid(row=0, column=0, columnspan=TAMANHO_TABULEIRO, pady=(10, 5))

        # Cria botões para o tabuleiro
        self.botoes = []
        for i in range(TAMANHO_TABULEIRO):
            linha_botoes = []
            for j in range(TAMANHO_TABULEIRO):
                btn = tk.Button(
                    self.root, image=self.img_agua, width=64, height=64,
                    command=lambda i=i, j=j: self.atacar(i, j)
                )
                btn.grid(row=i + 1, column=j, padx=2, pady=2)  # Ajusta a posição e espaçamento
                linha_botoes.append(btn)
            self.botoes.append(linha_botoes)

        # Mensagem de feedback
        self.label_mensagem = tk.Label(self.root, text="", font=("Helvetica", 12))
        self.label_mensagem.grid(row=TAMANHO_TABULEIRO + 1, column=0, columnspan=TAMANHO_TABULEIRO, pady=10)

    def atacar(self, i, j):
        # Verifica se o botão já foi clicado
        if self.atacado[i][j]:
            self.exibir_mensagem("Você já atacou aqui!")
            return

        self.atacado[i][j] = True  # Marca o botão como atacado

        # Verifica se acertou um navio
        if (i, j) in self.navios_oponente:
            self.botoes[i][j].config(image=self.img_acerto)
            self.acertos += 1
            self.atualizar_contadores()
            self.exibir_mensagem("Navio inimigo atingido!")
            if self.acertos == NUM_NAVIOS:
                self.mensagem_vitoria()
        else:
            self.botoes[i][j].config(image=self.img_area_atacada)
            self.aliados -= 1
            self.atualizar_contadores()
            self.exibir_mensagem("Tiro na água!")
            if self.aliados == 0:
                self.mensagem_derrota()

    def atualizar_contadores(self):
        self.label_contadores.config(text=f"Aliados: {self.aliados} | Acertos: {self.acertos}")

    def exibir_mensagem(self, mensagem):
        self.label_mensagem.config(text=mensagem)
        self.root.after(2000, lambda: self.label_mensagem.config(text=""))

    def mensagem_vitoria(self):
        self.revelar_navios()
        self.exibir_mensagem("Parabéns! Você venceu!")
        for i in range(TAMANHO_TABULEIRO):
            for j in range(TAMANHO_TABULEIRO):
                self.botoes[i][j].config(state="disabled")

    def mensagem_derrota(self):
        self.revelar_navios()
        self.exibir_mensagem("Fim de jogo! Você perdeu.")
        for i in range(TAMANHO_TABULEIRO):
            for j in range(TAMANHO_TABULEIRO):
                self.botoes[i][j].config(state="disabled")

    def revelar_navios(self):
        for x, y in self.navios_oponente:
            if self.botoes[x][y]["image"] == str(self.img_agua):
                self.botoes[x][y].config(image=self.img_navio)

# Configuração da interface
root = tk.Tk()
app = BatalhaNaval()
root.mainloop()
import tkinter as tk
import random

# Configurações do tabuleiro
TAMANHO_TABULEIRO = 5
NUM_NAVIOS = 3

class BatalhaNaval:
    def _init_(self, root):
        self.root = root
        self.root.title("Batalha Naval")
        self.root.resizable(False, False)  # Impede o redimensionamento da janela

        # Carregar imagens (sprites)
        self.img_agua = tk.PhotoImage(file="agua.png")
        self.img_navio = tk.PhotoImage(file="navio.png")
        self.img_acerto = tk.PhotoImage(file="navio.png")
        self.img_area_atacada = tk.PhotoImage(file="area_atacada.png")  # Novo sprite para locais atacados

        # Inicializa o tabuleiro
        self.tabuleiro_oponente = [["~" for _ in range(TAMANHO_TABULEIRO)] for _ in range(TAMANHO_TABULEIRO)]
        self.atacado = [[False for _ in range(TAMANHO_TABULEIRO)] for _ in range(TAMANHO_TABULEIRO)]  # Estado do ataque

        # Posiciona os navios do oponente
        self.navios_oponente = set()
        while len(self.navios_oponente) < NUM_NAVIOS:
            linha = random.randint(0, TAMANHO_TABULEIRO - 1)
            coluna = random.randint(0, TAMANHO_TABULEIRO - 1)
            self.navios_oponente.add((linha, coluna))

        # Contadores
        self.acertos = 0
        self.aliados = 25

        # Exibe os contadores
        self.label_contadores = tk.Label(
            self.root,
            text=f"Aliados: {self.aliados} | Acertos: {self.acertos}",
            font=("Helvetica", 12, "bold")
        )
        self.label_contadores.grid(row=0, column=0, columnspan=TAMANHO_TABULEIRO, pady=(10, 5))

        # Cria botões para o tabuleiro
        self.botoes = []
        for i in range(TAMANHO_TABULEIRO):
            linha_botoes = []
            for j in range(TAMANHO_TABULEIRO):
                btn = tk.Button(
                    self.root, image=self.img_agua, width=64, height=64,
                    command=lambda i=i, j=j: self.atacar(i, j)
                )
                btn.grid(row=i + 1, column=j, padx=2, pady=2)  # Ajusta a posição e espaçamento
                linha_botoes.append(btn)
            self.botoes.append(linha_botoes)

        # Mensagem de feedback
        self.label_mensagem = tk.Label(self.root, text="", font=("Helvetica", 12))
        self.label_mensagem.grid(row=TAMANHO_TABULEIRO + 1, column=0, columnspan=TAMANHO_TABULEIRO, pady=10)

    def atacar(self, i, j):
        # Verifica se o botão já foi clicado
        if self.atacado[i][j]:
            self.exibir_mensagem("Você já atacou aqui!")
            return

        self.atacado[i][j] = True  # Marca o botão como atacado

        # Verifica se acertou um navio
        if (i, j) in self.navios_oponente:
            self.botoes[i][j].config(image=self.img_acerto)
            self.acertos += 1
            self.atualizar_contadores()
            self.exibir_mensagem("Navio inimigo atingido!")
            if self.acertos == NUM_NAVIOS:
                self.mensagem_vitoria()
        else:
            self.botoes[i][j].config(image=self.img_area_atacada)
            self.aliados -= 1
            self.atualizar_contadores()
            self.exibir_mensagem("Tiro na água!")
            if self.aliados == 0:
                self.mensagem_derrota()

    def atualizar_contadores(self):
        self.label_contadores.config(text=f"Aliados: {self.aliados} | Acertos: {self.acertos}")

    def exibir_mensagem(self, mensagem):
        self.label_mensagem.config(text=mensagem)
        self.root.after(2000, lambda: self.label_mensagem.config(text=""))

    def mensagem_vitoria(self):
        self.revelar_navios()
        self.exibir_mensagem("Parabéns! Você venceu!")
        for i in range(TAMANHO_TABULEIRO):
            for j in range(TAMANHO_TABULEIRO):
                self.botoes[i][j].config(state="disabled")

    def mensagem_derrota(self):
        self.revelar_navios()
        self.exibir_mensagem("Fim de jogo! Você perdeu.")
        for i in range(TAMANHO_TABULEIRO):
            for j in range(TAMANHO_TABULEIRO):
                self.botoes[i][j].config(state="disabled")

    def revelar_navios(self):
        for x, y in self.navios_oponente:
            if self.botoes[x][y]["image"] == str(self.img_agua):
                self.botoes[x][y].config(image=self.img_navio)

# Configuração da interface
root = tk.Tk()
app = BatalhaNaval()
root.mainloop()