import tkinter as tk
import random

# Configurações do tabuleiro
TAMANHO_TABULEIRO = 5
NUM_NAVIOS = 3

class BatalhaNaval:
    def __init__(self, root):
        self.root = root
        self.root.title("Batalha Naval")
        self.root.resizable(False, False)

        # Carregar imagens (sprites)
        self.img_agua = tk.PhotoImage(file="agua.png")
        self.img_navio = tk.PhotoImage(file="navio.png")
        self.img_acerto = tk.PhotoImage(file="acerto.png")
        self.img_area_atacada = tk.PhotoImage(file="area_atacada.png")

        # Tela inicial com regras
        self.tela_inicial()

    def tela_inicial(self):
        self.frame_inicial = tk.Frame(self.root)
        self.frame_inicial.pack(pady=20)

        label_titulo = tk.Label(self.frame_inicial, text="Bem-vindo à Batalha Naval!", font=("Helvetica", 16, "bold"))
        label_titulo.pack(pady=10)

        regras = (
            "Regras do jogo:\n"
            "- Você tem um número limitado de disparos baseado em 2 dados lançados.\n"
            "- Acerte os navios do inimigo para vencer.\n"
            "- Se os disparos acabarem antes de afundar os navios, você perde."
        )
        label_regras = tk.Label(self.frame_inicial, text=regras, font=("Helvetica", 12), justify="left")
        label_regras.pack(pady=10)

        botao_iniciar = tk.Button(self.frame_inicial, text="Iniciar Jogo", font=("Helvetica", 12, "bold"),
                                  command=self.iniciar_jogo)
        botao_iniciar.pack(pady=20)

    def iniciar_jogo(self):
        self.frame_inicial.destroy()  # Remove a tela inicial

        # Inicializa o tabuleiro
        self.tabuleiro_oponente = [["~" for _ in range(TAMANHO_TABULEIRO)] for _ in range(TAMANHO_TABULEIRO)]
        self.atacado = [[False for _ in range(TAMANHO_TABULEIRO)] for _ in range(TAMANHO_TABULEIRO)]

        # Posiciona os navios do oponente
        self.navios_oponente = set()
        while len(self.navios_oponente) < NUM_NAVIOS:
            linha = random.randint(0, TAMANHO_TABULEIRO - 1)
            coluna = random.randint(0, TAMANHO_TABULEIRO - 1)
            self.navios_oponente.add((linha, coluna))

        # Determina o número de disparos baseado no lançamento de dois dados
        self.disparos = random.randint(1, 6) + random.randint(1, 6)

        # Contadores
        self.acertos = 0

        # Exibe os contadores
        self.label_contadores = tk.Label(
            self.root,
            text=f"Disparos restantes: {self.disparos} | Acertos: {self.acertos}",
            font=("Helvetica", 12, "bold")
        )
        self.label_contadores.grid(row=0, column=0, columnspan=TAMANHO_TABULEIRO, pady=(10, 5))

        # Cria botões para o tabuleiro
        self.botoes = []
        for i in range(TAMANHO_TABULEIRO):
            linha_botoes = []
            for j in range(TAMANHO_TABULEIRO):
                btn = tk.Button(
                    self.root, image=self.img_agua, width=64, height=64,
                    command=lambda i=i, j=j: self.atacar(i, j)
                )
                btn.grid(row=i + 1, column=j, padx=2, pady=2)
                linha_botoes.append(btn)
            self.botoes.append(linha_botoes)

        # Mensagem de feedback
        self.label_mensagem = tk.Label(self.root, text="", font=("Helvetica", 12))
        self.label_mensagem.grid(row=TAMANHO_TABULEIRO + 1, column=0, columnspan=TAMANHO_TABULEIRO, pady=10)

    def atacar(self, i, j):
        if self.atacado[i][j]:
            self.exibir_mensagem("Você já atacou aqui!")
            return

        self.atacado[i][j] = True

        if (i, j) in self.navios_oponente:
            self.botoes[i][j].config(image=self.img_acerto)
            self.acertos += 1
            self.exibir_mensagem("Navio inimigo atingido!")
            if self.acertos == NUM_NAVIOS:
                self.mensagem_vitoria()
        else:
            self.botoes[i][j].config(image=self.img_area_atacada)
            self.disparos -= 1
            self.exibir_mensagem("Tiro na água!")
            if self.disparos == 0:
                self.mensagem_derrota()

        self.atualizar_contadores()

    def atualizar_contadores(self):
        self.label_contadores.config(text=f"Disparos restantes: {self.disparos} | Acertos: {self.acertos}")

    def exibir_mensagem(self, mensagem):
        self.label_mensagem.config(text=mensagem)
        self.root.after(2000, lambda: self.label_mensagem.config(text=""))

    def mensagem_vitoria(self):
        self.revelar_navios()
        self.tela_fim_jogo("Parabéns! Você venceu!")

    def mensagem_derrota(self):
        self.revelar_navios()
        self.tela_fim_jogo("Fim de jogo! Você perdeu.")

    def revelar_navios(self):
        for x, y in self.navios_oponente:
            if self.botoes[x][y]["image"] == str(self.img_agua):
                self.botoes[x][y].config(image=self.img_navio)

    def tela_fim_jogo(self, mensagem):
        self.frame_fim = tk.Frame(self.root)
        self.frame_fim.grid(row=0, column=0, columnspan=TAMANHO_TABULEIRO, pady=10)

        label_fim = tk.Label(self.frame_fim, text=mensagem, font=("Helvetica", 16, "bold"))
        label_fim.pack(pady=10)

        botao_reiniciar = tk.Button(self.frame_fim, text="Reiniciar", font=("Helvetica", 12, "bold"),
                                    command=self.reiniciar_jogo)
        botao_reiniciar.pack(pady=10)

    def reiniciar_jogo(self):
        self.frame_fim.destroy()
        for widget in self.root.winfo_children():
            widget.destroy()
        self.__init__(self.root)

# Configuração da interface
root = tk.Tk()
app = BatalhaNaval(root)
root.mainloop()
